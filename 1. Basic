package javacodes;

import java.util.Arrays;

public class DP_First {
    public static void main(String[] args) {
        
        int n = 8;
        int [] dp = new int[n+1];
        Arrays.fill(dp, -1);
        System.out.println(fib(n, dp));

        System.out.println(fib2(n));
        System.out.println(fib3(n));
    }


    // Using top down approach (Recursion + Memorization).
    public static int fib(int n, int []dp)
    {
        if(n <= 1)
        {
            return n;
        }

        if(dp[n] >= 0)
        {
            return dp[n];
        }

        dp[n] = fib(n-1, dp) + fib(n-2, dp);
        return dp[n];
    }

    // Using bottom up approach (Tabularization)
    public static int fib2(int n)
    {
        int [] dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;

        for(int i = 2; i < dp.length; i++)
        {
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
    }

    //space optimisation
    public static int fib3(int n)
    {
        int prev1 = 0;
        int prev2 = 1;

        if(n == 0)
        {
            return 0;
        }

        for(int i = 2; i <= n; i++)
        {
            int curr = prev1 + prev2;
            prev1 = prev2;
            prev2 = curr;
        }

        return prev2;
    }
}
